# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: backend
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    
    - name: Change application.yml to deploy version
      run: |
        cd ./src/main/resources
        rm ./application.yml
        mv ./application-deploy.yml ./application.yml
        cat application.yml
          
    - name: Make application-secret.yml
      env:
        GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        JWT_TOKEN_SECRET: ${{secrets.JWT_TOKEN_SECRET }}
      run: |
        cd ./src/main/resources
        echo -e \
        "
        spring:
          security:
            oauth2:
              client:
                registration:
                  google:
                    client-id: $GOOGLE_OAUTH_CLIENT_ID
                    cliend-secret: $GOOGLE_OAUTH_CLIENT_SECRET
                    scope:
                      - profile
                      - email

        jwt:
          secret: $JWT_TOKEN_SECRET
        " > application-secret.yml
        cat application-secret.yml

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew clean build
    
    - name: Make Directory for deliver
      run: mkdir deploy
    
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/
      
    - name: Copy AppSpec
      run: cp ./appspec.yml ./deploy/
    
    - name: Copy deploy.sh
      run: cp ./scripts/* ./deploy/
    
    - name : Make zip file
      run: zip -r -qq -j ./vingterview-build.zip ./deploy
      
    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        --acl private \
        ./vingterview-build.zip s3://deploy-vingterview/
    
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
      run: |
        aws deploy create-deployment \
        --application-name vingterview \
        --deployment-group-name vingterview-group \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=deploy-vingterview,bundleType=zip,key=vingterview-build.zip \
        --region ap-northeast-2
        
